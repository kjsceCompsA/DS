//1411057 A3

#include<stdio.h>
#include<conio.h>
#include<malloc.h>

struct node {
  int data;
  struct node *link;
};

void addatend(struct node **, int );
void addatbeg(struct node **, int );
void display(struct node *);
int countnode(struct node *);
void concat(struct node **, struct node *);
void reverse(struct node **);

void main() {
  struct node *start1 = NULL, *start2 = NULL, *p;
  int value, i, choice1, choice2;
  clrscr();
  while (choice1 != 6) {
    printf("\n\n1. Add Element to the end of list\n2. Add Element to the begining of list\n3. Count the elements in the list\n4. Display the list of elements\n5. Reverse the list\n6. Exit\n\n");
    printf("Enter your choice number: ");
    scanf("%d",&choice1);
    switch (choice1) {
      case 1: printf("\nEnter a value: ");
              scanf ("%d",&value);
              addatend(&start1, value);
              break;
      case 2: printf("\nEnter a value: ");
              scanf ("%d",&value);
              addatbeg(&start1, value);
              break;
      case 3: printf("\nThere is/are %d nodes.\n", countnode(start1));
              break;
      case 4: display(start1);
              break;
      case 5: reverse(&start1);
              printf("Done!");
              break;
      case 6: break;
      default: printf("Invalid input!\n");
    }
  }
  printf("First list:");
  display(start1);

  printf("\nDo you want to create a second list(1-Yes/2-No): ");
  scanf("%d",&choice2);
  if(choice2 == 1) {
    while (choice1 != 12) {
      printf("\n\n1. Add Element to the end of list 2\n2. Add Element to the begining of list 2\n3. Count the elements in list 2\n4. Display second list of elements\n5. Reverse the list\n6.Concatinate list 2 after list 1\n7. Concatinate list 1 after list 2\n8. Display first list\n9. Add Element to the end of list 1\n10. Add Element to the begining of list 1\n11. Count the elements in list 1\n12. Exit\n\n");
      printf("Enter your choice number: ");
      scanf("%d",&choice1);
      switch (choice1) {
        case 1: printf("\nEnter a value: ");
                scanf ("%d",&value);
                addatend(&start2, value);
                break;
        case 2: printf("\nEnter a value: ");
                scanf ("%d",&value);
                addatbeg(&start2, value);
                break;
        case 3: printf("\nThere is/are %d nodes.\n", countnode(start2));
                break;
        case 4: display(start2);
                break;
        case 5: reverse(&start2);
                printf("Done!");
                break;
        case 6: concat(&start1, start2);
                printf("Done!");
                break;
        case 7: concat(&start2, start1);
                printf("Done!");
                break;
        case 8: display(start1);
                break;
        case 9: printf("\nEnter a value: ");
                scanf ("%d",&value);
                addatend(&start1, value);
                break;
        case 10: printf("\nEnter a value: ");
                scanf ("%d",&value);
                addatbeg(&start1, value);
                break;
        case 11: printf("\nThere is/are %d nodes.\n", countnode(start2));
                break;
        case 12: break;
        default: printf("Invalid input!\n");
      }
    }
    printf("First list:");
    display(start1);
    printf("\nSecond list:");
    display(start2);
  }
  else {
    printf("\nEnd of program");
  }
  getch();
}

void addatend(struct node **q, int value) {
  struct node *temp, *p;
  temp = (struct node*)malloc(sizeof(struct node));
  temp->data = value;
  temp->link = NULL;
  if (*q == NULL) {
    *q = temp;
  }
  else {
    p = *q;
    while (p->link != NULL) {
      p = p->link;
    }
    p->link = temp;
  }
}

void addatbeg(struct node **q, int value) {
  struct node *start = NULL, *temp;
  if (*q == NULL) {
    temp = (struct node *)malloc(sizeof(struct node));
    temp->data = value;
    temp->link = NULL;
    start = temp;
    *q = start;
  }
    else {
    temp = (struct node *)malloc(sizeof(struct node));
    temp->data = value;
    temp->link = *q;
    *q = temp;
  }
}



void display(struct node *q) {
  struct node *p;
  if (q == NULL) {
    printf("\nThe list is empty\n");
  }
  else {
    printf("\nThe elements is/are: ");
    p =q;
    while (p != NULL) {
      printf(" %d ",p->data);
      p = p->link;
    }
    printf("\n");
  }
}

int countnode(struct node *q) {
  struct node *p;
  int i = 0;
  if (q == NULL) {
    return 0;
  }
  else {
    p =q;
    while (p != NULL) {
      i++;
      p = p->link;
    }
    return i;
  }
}

void concat(struct node **q, struct node *r) {
   struct node *p;
   if (*q == NULL) {
    *q = r;
  }
  else {
    p = *q;
    while (p->link != NULL) {
      p = p->link;
    }
    p->link = r;
  }
}

void reverse(struct node **q) {
  struct node *p, *start = NULL, *temp;
  p = *q;
  while (p != NULL) {
    temp = (struct node *)malloc(sizeof(struct node));
    temp->data = p->data;
    temp->link = start;
    start = temp;
    p = p->link;
  }
  *q = start;
}
