// 1411057 A3


#include<stdio.h>
#include<conio.h>
#include<malloc.h>
struct node
{
 int value;
 int power;
 struct node *link;
};
struct node *start1=NULL;
struct node *start2=NULL;
struct node *start3=NULL;
struct node *start4=NULL;
struct node *create(struct node *);
struct node *display(struct node *);
struct node *addition(struct node *,struct node *,struct node *);
struct node *subtraction(struct node *,struct node *,struct node *);
struct node *addnode(struct node *,int ,int );
void main()
{
 int ch;
 clrscr();
 do
 {
  printf("\nMenu\n1.Create polynomial1\n2.Display polynomial1");
  printf("\n3.Create polynomial2\n4.Display polynomial2\n5.Add");
  printf("\n6.Display addition result\n7.Subtract");
  printf("\n8.Display subtraction result\n9.Exit");
  printf("\nEnter choice");
  scanf("%d",&ch);
  switch(ch)
  {
   case 1:start1=create(start1);
	  printf("\nPolynomial1 created");
	  break;
   case 2:start1=display(start1);
	  printf("\nPolynomial1 displayed");
	  break;
   case 3:start2=create(start2);
	  printf("\nPolynomial2 created");
	  break;
   case 4:start2=display(start2);
	  printf("\nPolynomial2 displayed");
	  break;
   case 5:start3=addition(start1,start2,start3);
	  printf("\nPolynomials added");
	  break;
   case 6:start3=display(start3);
	  printf("\nAddition result displayed");
	  break;
   case 7:start4=subtraction(start1,start2,start4);
	  printf("\nPolynomials subtracted");
	  break;
   case 8:start4=display(start4);
	  printf("\nSubtraction result displayed");
	  break;
  }
 }while(ch!=9);
 getch();
}
struct node *create(struct node *start)
{
 struct node *ptr,*newnode;
 int a,b;
 printf("\nEnter coefficient");
 scanf("%d",&a);
 printf("Enter power");
 scanf("%d",&b);
 while(a!=0)
 {
  if(start==NULL)
  {
   newnode=(struct node *)malloc(sizeof(struct node));
   newnode->value=a;
   newnode->power=b;
   newnode->link=NULL;
   start=newnode;
  }
  else
  {
   ptr=start;
   while(ptr->link!=NULL)
   {
    ptr=ptr->link;
   }
   newnode=(struct node *)malloc(sizeof(struct node));
   newnode->value=a;
   newnode->power=b;
   newnode->link=NULL;
   ptr->link=newnode;
  }
  printf("Enter coefficient");
  scanf("%d",&a);
  if(a==0)
  break;
  printf("Enter power");
  scanf("%d",&b);
 }
 return start;
}
struct node *display(struct node *start)
{
 struct node *ptr;
 ptr=start;
 while(ptr!=NULL)
 {
  if(ptr->value>0)
  {
   printf("\t+%dx^%d",ptr->value,ptr->power);
  }
  else
  {
  printf("\t%dx^%d",ptr->value,ptr->power);
  }
  ptr=ptr->link;
 }
 return start;
}
struct node *addition(struct node *start1,struct node *start2,struct node *start3)
{
 struct node *ptr1,*ptr2;
 int sum;
 ptr1=start1,ptr2=start2;
 while(ptr1!=NULL && ptr2!=NULL)
 {
  if(ptr1->power==ptr2->power)
  {
   sum=ptr1->value + ptr2->value;
   start3=addnode(start3,sum,ptr1->power);
   ptr1=ptr1->link;
   ptr2=ptr2->link;
  }
  else if(ptr1->power>ptr2->power)
  {
   start3=addnode(start3,ptr1->value,ptr1->power);
   ptr1=ptr1->link;
  }
  else if(ptr1->power<ptr2->power)
  {
   start3=addnode(start3,ptr2->value,ptr2->power);
   ptr2=ptr2->link;
  }
 }
 if(ptr1==NULL)
 {
  while(ptr2!=NULL)
  {
   start3=addnode(start3,ptr2->value,ptr2->power);
   ptr2=ptr2->link;
  }
 }
 if(ptr2==NULL)
 {
  while(ptr1!=NULL)
  {
   start3=addnode(start3,ptr1->value,ptr1->power);
   ptr1=ptr1->link;
  }
 }
 return start3;
}
struct node *subtraction(struct node *start1,struct node *start2,struct node *start4)
{
 struct node *ptr1,*ptr2;
 int sum;
 ptr1=start1,ptr2=start2;
 while(ptr1!=NULL && ptr2!=NULL)
 {
  if(ptr1->power==ptr2->power)
  {
   sum=ptr1->value - ptr2->value;
   start4=addnode(start4,sum,ptr1->power);
   ptr1=ptr1->link;
   ptr2=ptr2->link;
  }
  else if(ptr1->power>ptr2->power)
  {
   start4=addnode(start4,ptr1->value,ptr1->power);
   ptr1=ptr1->link;
  }
  else if(ptr1->power<ptr2->power)
  {
   start4=addnode(start4,ptr2->value,ptr2->power);
   ptr2=ptr2->link;
  }
 }
 if(ptr1==NULL)
 {
  while(ptr2!=NULL)
  {
   start4=addnode(start4,ptr2->value,ptr2->power);
   ptr2=ptr2->link;
  }
 }
 if(ptr2==NULL)
 {
  while(ptr1!=NULL)
  {
   start4=addnode(start4,ptr1->value,ptr1->power);
   ptr1=ptr1->link;
  }
 }
 return start4;
}
struct node *addnode(struct node *start,int a,int b)
{
 struct node *ptr,*newnode;
 if(start==NULL)
 {
  newnode=(struct node *)malloc(sizeof(struct node));
  newnode->value=a;
  newnode->power=b;
  newnode->link=NULL;
  start=newnode;
 }
 else
 {
  ptr=start;
  while(ptr->link!=NULL)
  {
   ptr=ptr->link;
  }
  newnode=(struct node *)malloc(sizeof(struct node));
  newnode->value=a;
  newnode->power=b;
  newnode->link=NULL;
  ptr->link=newnode;
 }
 return start;
}
